name: Build & Release

on:
  push:
    tags:
      - 'v*.*.*'  # Auto-trigger when a tag is pushed (it uses fnmatch patterns, not regex)
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (v0.0.0 format)'
        required: true
        default: 'v0.0.0'

env:
  APP_NAME: snake

permissions:
  contents: write

jobs:
  create_tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' # Only run for manual trigger

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version format
        run: |
          input_version="${{ github.event.inputs.version }}"
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")

          if [[ ! "$input_version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in the format vX.Y.Z (e.g., v1.2.3)"
            exit 1
          elif [[ "$input_version" == "v0.0.0" ]]; then
            if [[ ! "$latest_tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Can't build latest version. Latest git tag ($latest_tag) is not in the correct format vX.Y.Z (e.g., v1.2.3)"
              exit 1
            fi
          fi

      - name: Set up Git user
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Create and push tag
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^v0\.0\.0$ ]]; then
            git tag ${{ github.event.inputs.version }}
            git push origin ${{ github.event.inputs.version }}
          fi

  build:
    runs-on: ubuntu-latest
    needs: create_tag
    if: ${{ !failure() && !cancelled()}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for commit history (fetches all commits)

      - name: Install dependencies
        run: sudo apt-get install -y g++-mingw-w64-x86-64 make

      - name: Build Binaries
        run: | 
          make
          make windows

      - name: Archive build artifacts
        run: |
          tar -czvf ${{ env.APP_NAME }}-${{ github.event.inputs.version || github.ref_name }}-linux-x86_64.tar.gz ${{ env.APP_NAME }}
          zip ${{ env.APP_NAME }}-${{ github.event.inputs.version || github.ref_name }}-windows-x86_64.zip ${{ env.APP_NAME }}.exe

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-artifacts
          path: |
            ${{ env.APP_NAME }}-${{ github.event.inputs.version || github.ref_name }}-linux-x86_64.tar.gz
            ${{ env.APP_NAME }}-${{ github.event.inputs.version || github.ref_name }}-windows-x86_64.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !failure() && !cancelled()}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-artifacts
          path: .

      - name: Generate release notes
        id: release_notes
        run: |
          TAG=$(git describe --tags --abbrev=0)
          PREV_TAG=$(git describe --tags --abbrev=0 "$TAG"^ || echo "")
          echo "Includes following commits: " > release_notes.md
          if [ -z "$PREV_TAG" ]; then
            git log --pretty=format:"- %h %s" "$TAG" >> release_notes.md
          else
            git log --pretty=format:"- %h %s" "$PREV_TAG".."$TAG" >> release_notes.md
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          name: Release ${{ github.event.inputs.version || github.ref_name }}
          body_path: release_notes.md
          files: |
            ${{ env.APP_NAME }}-${{ github.event.inputs.version || github.ref_name }}-linux-x86_64.tar.gz
            ${{ env.APP_NAME }}-${{ github.event.inputs.version || github.ref_name }}-windows-x86_64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}